var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';

function nodesToString(mem, children, index) {
  if (Object.prototype.toString.call(children) !== '[object Array]') children = [children];

  children.forEach(function (child, i) {
    // const isElement = React.isValidElement(child);
    // const elementKey = `${index !== 0 ? index + '-' : ''}${i}:${typeof child.type === 'function' ? child.type.name : child.type || 'var'}`;
    var elementKey = '' + i;

    if (typeof child === 'string') {
      mem = '' + mem + child;
    } else if (child.props && child.props.children) {
      mem = mem + '<' + elementKey + '>' + nodesToString('', child.props.children, i + 1) + '</' + elementKey + '>';
    } else if (React.isValidElement(child)) {
      mem = mem + '<' + elementKey + '></' + elementKey + '>';
    } else if ((typeof child === 'undefined' ? 'undefined' : _typeof(child)) === 'object') {
      var clone = _extends({}, child);
      var format = clone.format;
      delete clone.format;

      var keys = Object.keys(clone);
      if (format && keys.length === 1) {
        mem = mem + '<' + elementKey + '>{{' + keys[0] + ', ' + format + '}}</' + elementKey + '>';
      } else if (keys.length === 1) {
        mem = mem + '<' + elementKey + '>{{' + keys[0] + '}}</' + elementKey + '>';
      }
    }
  });

  return mem;
}

var REGEXP = new RegExp('(?:<([^>]*)>(.*?)<\\/\\1>)', 'gi');
function renderNodes(children, targetString, i18n) {

  function getChildren(nodes, str) {
    if (Object.prototype.toString.call(nodes) !== '[object Array]') nodes = [nodes];

    var toRender = str.split(REGEXP).reduce(function (mem, match, i) {
      if (match) mem.push(match);
      return mem;
    }, []);

    return toRender.reduce(function (mem, part, i) {
      // is a tag
      var isTag = !isNaN(part);
      var previousIsTag = i > 0 ? !isNaN(toRender[i - 1]) : false;
      if (previousIsTag) {
        var child = nodes[parseInt(toRender[i - 1], 10)] || {};
        if (child.props && !child.props.children) previousIsTag = false;
      }

      // will be rendered inside child
      if (previousIsTag) return mem;

      if (isTag) {
        var _child = nodes[parseInt(part, 10)] || {};
        var isElement = React.isValidElement(_child);

        if (typeof _child === 'string') {
          mem.push(_child);
        } else if (_child.props && _child.props.children) {
          var inner = getChildren(_child.props && _child.props.children, toRender[i + 1]);

          mem.push(React.cloneElement(_child, _extends({}, _child.props, { key: i }), inner));
        } else if ((typeof _child === 'undefined' ? 'undefined' : _typeof(_child)) === 'object' && !isElement) {
          var interpolated = i18n.services.interpolator.interpolate(toRender[i + 1], _child, i18n.language);
          mem.push(interpolated);
        } else {
          mem.push(_child);
        }
      }

      // no element just a string
      if (!isTag && !previousIsTag) mem.push(part);

      return mem;
    }, []);
  }

  return getChildren(children, targetString);
}

var Trans = function (_React$Component) {
  _inherits(Trans, _React$Component);

  function Trans(props, context) {
    _classCallCheck(this, Trans);

    var _this = _possibleConstructorReturn(this, (Trans.__proto__ || Object.getPrototypeOf(Trans)).call(this, props, context));

    _this.i18n = context.i18n;
    _this.t = context.t;
    return _this;
  }

  _createClass(Trans, [{
    key: 'componentDidMount',
    value: function componentDidMount() {}
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          count = _props.count;


      var defaultValue = nodesToString('', children, 0);
      var key = this.props.i18nKey || defaultValue;
      var translation = this.t(key, { interpolation: { prefix: '#$?', suffix: '?$#' }, defaultValue: defaultValue, count: count });

      var additionalProps = {};
      if (this.i18n.options.react && this.i18n.options.react.exposeNamespace) {
        var ns = typeof this.t.ns === 'string' ? this.t.ns : this.t.ns[0];
        if (this.props.i18nKey && this.i18n.options.nsSeparator && this.props.i18nKey.indexOf(this.i18n.options.nsSeparator) > -1) {
          var parts = this.props.i18nKey.split(this.i18n.options.nsSeparator);
          ns = parts[0];
        }
        if (this.t.ns) additionalProps['data-i18next-options'] = JSON.stringify({ ns: ns });
      }

      return React.createElement('div', additionalProps, renderNodes(children, translation, this.i18n));
    }
  }]);

  return Trans;
}(React.Component);

export default Trans;


Trans.contextTypes = {
  i18n: PropTypes.object.isRequired,
  t: PropTypes.func.isRequired
};