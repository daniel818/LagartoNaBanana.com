'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = translate;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getDisplayName(component) {
  return component.displayName || component.name || 'Component';
}

var removedIsInitialSSR = false;

function translate(namespaces) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$withRef = options.withRef,
      withRef = _options$withRef === undefined ? false : _options$withRef,
      _options$bindI18n = options.bindI18n,
      bindI18n = _options$bindI18n === undefined ? 'languageChanged loaded' : _options$bindI18n,
      _options$bindStore = options.bindStore,
      bindStore = _options$bindStore === undefined ? 'added removed' : _options$bindStore,
      _options$translateFun = options.translateFuncName,
      translateFuncName = _options$translateFun === undefined ? 't' : _options$translateFun;
  var _options$wait = options.wait,
      wait = _options$wait === undefined ? false : _options$wait;


  return function Wrapper(WrappedComponent) {
    var _Translate$childConte;

    var Translate = function (_Component) {
      _inherits(Translate, _Component);

      function Translate(props, context) {
        _classCallCheck(this, Translate);

        var _this = _possibleConstructorReturn(this, (Translate.__proto__ || Object.getPrototypeOf(Translate)).call(this, props, context));

        _this.i18n = context.i18n || props.i18n || options.i18n;
        namespaces = namespaces || _this.i18n.options.defaultNS;
        if (typeof namespaces === 'string') namespaces = [namespaces];

        if (!wait && _this.i18n.options && (_this.i18n.options.wait || _this.i18n.options.react && _this.i18n.options.react.wait)) wait = true;

        _this.nsMode = options.nsMode || _this.i18n.options && _this.i18n.options.react && _this.i18n.options.react.nsMode || 'default';

        // nextjs SSR: getting data from next.js or other ssr stack
        if (props.initialI18nStore) {
          _this.i18n.services.resourceStore.data = props.initialI18nStore;
          wait = false; // we got all passed down already
        }
        if (props.initialLanguage) {
          _this.i18n.changeLanguage(props.initialLanguage);
        }

        // provider SSR: data was set in provider and ssr flag was set
        if (_this.i18n.options.isInitialSSR) {
          wait = false;
        }

        _this.state = {
          i18nLoadedAt: null,
          ready: false
        };

        _this.onI18nChanged = _this.onI18nChanged.bind(_this);
        _this.getWrappedInstance = _this.getWrappedInstance.bind(_this);
        return _this;
      }

      _createClass(Translate, [{
        key: 'getChildContext',
        value: function getChildContext() {
          var _ref;

          return _ref = {}, _defineProperty(_ref, translateFuncName, this[translateFuncName]), _defineProperty(_ref, 'i18n', this.i18n), _ref;
        }
      }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
          this[translateFuncName] = this.i18n.getFixedT(null, this.nsMode === 'fallback' ? namespaces : namespaces[0]);
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          var _this2 = this;

          var bind = function bind() {
            if (bindI18n && _this2.i18n) _this2.i18n.on(bindI18n, _this2.onI18nChanged);
            if (bindStore && _this2.i18n.store) _this2.i18n.store.on(bindStore, _this2.onI18nChanged);
          };

          this.mounted = true;
          this.i18n.loadNamespaces(namespaces, function () {
            var ready = function ready() {
              if (_this2.mounted && !_this2.state.ready) _this2.setState({ ready: true });
              if (wait && _this2.mounted) bind();
            };

            if (_this2.i18n.isInitialized) {
              ready();
            } else {
              var initialized = function initialized() {
                // due to emitter removing issue in i18next we need to delay remove
                setTimeout(function () {
                  _this2.i18n.off('initialized', initialized);
                }, 1000);
                ready();
              };

              _this2.i18n.on('initialized', initialized);
            }
          });

          if (!wait) bind();
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          var _this3 = this;

          this.mounted = false;
          if (this.onI18nChanged) {
            if (bindI18n) {
              var p = bindI18n.split(' ');
              p.forEach(function (f) {
                return _this3.i18n.off(f, _this3.onI18nChanged);
              });
            }
            if (bindStore) {
              var _p = bindStore.split(' ');
              _p.forEach(function (f) {
                return _this3.i18n.store && _this3.i18n.store.off(f, _this3.onI18nChanged);
              });
            }
          }
        }
      }, {
        key: 'onI18nChanged',
        value: function onI18nChanged() {
          if (!this.mounted) return;

          this.setState({ i18nLoadedAt: new Date() });
        }
      }, {
        key: 'getWrappedInstance',
        value: function getWrappedInstance() {
          if (!withRef) {
            // eslint-disable-next-line no-console
            console.error('To access the wrapped instance, you need to specify ' + '{ withRef: true } as the second argument of the translate() call.');
          }

          /* eslint react/no-string-refs: 1 */
          return this.refs.wrappedInstance;
        }
      }, {
        key: 'render',
        value: function render() {
          var _extraProps,
              _this4 = this;

          var _state = this.state,
              i18nLoadedAt = _state.i18nLoadedAt,
              ready = _state.ready;

          var extraProps = (_extraProps = {
            i18nLoadedAt: i18nLoadedAt
          }, _defineProperty(_extraProps, translateFuncName, this[translateFuncName]), _defineProperty(_extraProps, 'i18n', this.i18n), _extraProps);

          if (withRef) {
            extraProps.ref = 'wrappedInstance';
          }

          if (!ready && wait) return null;

          // remove ssr flag set by provider - first render was done from now on wait if set to wait
          if (this.i18n.options.isInitialSSR && !removedIsInitialSSR) {
            removedIsInitialSSR = true;
            setTimeout(function () {
              delete _this4.i18n.options.isInitialSSR;
            }, 100);
          }

          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, extraProps));
        }
      }]);

      return Translate;
    }(_react.Component);

    Translate.WrappedComponent = WrappedComponent;

    Translate.contextTypes = {
      i18n: _propTypes2.default.object
    };

    Translate.childContextTypes = (_Translate$childConte = {}, _defineProperty(_Translate$childConte, translateFuncName, _propTypes2.default.func.isRequired), _defineProperty(_Translate$childConte, 'i18n', _propTypes2.default.object), _Translate$childConte);

    Translate.displayName = 'Translate(' + getDisplayName(WrappedComponent) + ')';

    Translate.namespaces = namespaces;

    return (0, _hoistNonReactStatics2.default)(Translate, WrappedComponent);
  };
}