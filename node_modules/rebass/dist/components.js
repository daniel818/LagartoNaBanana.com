'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _theme = require('./theme');

var _util = require('./util');

var components = [
// Buttons
{
  name: 'Button',
  tag: 'button',
  props: {
    f: 1,
    m: 0,
    px: 3,
    py: 2,
    color: 'white'
  },
  style: function style(props) {
    return {
      display: 'inline-block',
      fontFamily: 'inherit',
      fontWeight: (0, _util.idx)('weights.1', props.theme),
      lineHeight: 1.25,
      textAlign: 'center',
      textDecoration: 'none',
      borderRadius: (0, _util.px)(props.theme.radius),
      border: 0,
      appearance: 'none',
      backgroundColor: (0, _util.color)(props)(props.bg),
      '&:hover': {
        backgroundColor: (0, _util.color)(props)(props.bg, 6)
      },
      '&:focus': {
        outline: 0,
        boxShadow: '0 0 0 2px ' + (0, _util.color)(props)(props.bg, 3)
      },
      '&:active': {
        backgroundColor: (0, _util.color)(props)(props.bg, 6),
        boxShadow: 'inset 0 0 8px ' + (0, _util.color)(props)(props.bg, 9)
      },
      '&:disabled': {
        opacity: 1 / 4
      }
    };
  }
}, {
  name: 'ButtonOutline',
  tag: 'Button',
  props: {
    color: 'blue',
    bg: 'transparent'
  },
  style: function style(props) {
    return {
      boxShadow: 'inset 0 0 0 2px',
      '&:hover': {
        color: (0, _util.color)(props)(props.color, 8),
        backgroundColor: 'transparent'
      },
      '&:focus': {
        boxShadow: 'inset 0 0 0 2px, 0 0 0 2px ' + (0, _util.color)(props)(props.color, 3)
      },
      '&:active': {
        backgroundColor: 'transparent',
        boxShadow: 'inset 0 0 0 2px, inset 0 0 8px ' + (0, _util.color)(props)(props.color, 9)
      }
    };
  }
}, {
  name: 'ButtonCircle',
  tag: 'Button',
  props: {
    px: 3
  },
  style: function style(props) {
    return {
      borderRadius: (0, _util.px)(99999)
    };
  }
}, {
  name: 'Link',
  tag: 'a',
  props: {
    color: 'blue'
  },
  style: function style(props) {
    return {
      '&:hover': {
        color: (0, _util.color)(props)(props.color, 8)
      }
    };
  }
}, {
  name: 'NavLink',
  tag: 'a',
  props: {
    f: 1,
    p: 2
  },
  style: function style(props) {
    return {
      display: 'inline-block',
      fontWeight: (0, _util.idx)('weights.1', props.theme),
      textDecoration: 'none',
      whiteSpace: 'nowrap',
      color: 'inherit',
      backgroundColor: props.active ? (0, _util.darken)(1 / 4) : null,
      cursor: 'pointer',
      '&:hover': {
        backgroundColor: (0, _util.darken)(1 / 16)
      },
      '&:disabled': {
        opacity: 1 / 4
      }
    };
  },
  propTypes: {
    active: _propTypes.bool
  }
}, {
  name: 'BlockLink',
  tag: 'a',
  props: {},
  style: {
    display: 'block',
    textDecoration: 'none',
    color: 'inherit'
  }
},

// Typography
{
  name: 'Text',
  tag: 'p',
  props: {
    m: 0
  },
  style: function style(props) {
    return Object.assign({
      textAlign: (0, _util.align)(props),
      fontWeight: props.bold ? (0, _util.idx)('weights.1', props.theme) : (0, _util.idx)('weights.0', props.theme)
    }, (0, _util.caps)(props));
  },
  propTypes: {
    left: _propTypes.bool,
    center: _propTypes.bool,
    right: _propTypes.bool,
    justify: _propTypes.bool,
    bold: _propTypes.bool,
    caps: _propTypes.bool
  }
}, {
  name: 'Heading',
  tag: 'Text',
  props: {
    is: 'h2',
    f: 5,
    m: 0,
    bold: true
  },
  style: {
    lineHeight: 1.25
  },
  propTypes: {
    left: _propTypes.bool,
    center: _propTypes.bool,
    right: _propTypes.bool,
    justify: _propTypes.bool,
    bold: _propTypes.bool,
    caps: _propTypes.bool
  }
}, {
  name: 'Subhead',
  tag: 'Heading',
  props: {
    is: 'h3',
    f: 4,
    m: 0
  },
  style: {}
}, {
  name: 'Small',
  tag: 'Text',
  props: {
    is: 'small',
    f: 0
  },
  style: {}
}, {
  name: 'Lead',
  tag: 'Text',
  props: {
    is: 'p',
    f: 3,
    m: 0
  },
  style: {
    lineHeight: 1.25
  }
}, {
  name: 'Pre',
  tag: 'pre',
  props: {
    f: 1,
    m: 0
  },
  style: function style(props) {
    return {
      fontFamily: props.theme.monospace,
      overflow: 'auto'
    };
  }
}, {
  name: 'Code',
  tag: 'code',
  props: {
    f: 1
  },
  style: function style(props) {
    return {
      fontFamily: props.theme.monospace
    };
  }
}, {
  name: 'Samp',
  tag: 'Code',
  props: {
    is: 'samp'
  },
  style: {}
}, {
  name: 'Blockquote',
  tag: 'Text',
  props: {
    is: 'blockquote',
    m: 0,
    f: 3
  },
  style: {}
},

// Forms
{
  name: 'Label',
  tag: 'label',
  props: {
    f: 1,
    mb: 1
  },
  style: {
    display: 'flex',
    alignItems: 'center'
  }
}, {
  name: 'Input',
  tag: 'input',
  props: {
    type: 'text',
    p: 1,
    m: 0,
    w: 1,
    color: 'inherit',
    bg: 'transparent'
  },
  style: function style(props) {
    return {
      fontFamily: 'inherit',
      fontSize: 'inherit',
      borderWidth: (0, _util.px)(1),
      borderStyle: 'solid',
      borderColor: (0, _util.color)(props)('gray', 2),
      borderRadius: (0, _util.px)(props.theme.radius),
      appearance: 'none',
      '&:focus': {
        outline: 'none',
        borderColor: (0, _util.color)(props)('blue')
      },
      '&:disabled': {
        opacity: 1 / 4
      }
    };
  }
}, {
  name: 'Select',
  tag: 'select',
  props: {
    p: 1,
    m: 0,
    w: 1,
    color: 'inherit',
    bg: 'transparent'
  },
  style: function style(props) {
    return {
      fontFamily: 'inherit',
      fontSize: 'inherit',
      height: 32,
      borderWidth: (0, _util.px)(1),
      borderStyle: 'solid',
      borderColor: (0, _util.color)(props)('gray', 2),
      borderRadius: (0, _util.px)(props.theme.radius),
      '&:focus': {
        outline: 'none',
        borderColor: (0, _util.color)(props)('blue')
      },
      '&:disabled': {
        opacity: 1 / 4
      }
    };
  }
}, {
  name: 'Textarea',
  tag: 'textarea',
  props: {
    p: 1,
    m: 0,
    w: 1,
    color: 'inherit',
    bg: 'transparent'
  },
  style: function style(props) {
    return {
      fontFamily: 'inherit',
      fontSize: 'inherit',
      borderWidth: (0, _util.px)(1),
      borderStyle: 'solid',
      borderColor: (0, _util.color)(props)('gray', 2),
      borderRadius: (0, _util.px)(props.theme.radius),
      appearance: 'none',
      '&:focus': {
        outline: 'none',
        borderColor: (0, _util.color)(props)('blue')
      },
      '&:disabled': {
        opacity: 1 / 4
      }
    };
  }
}, {
  name: 'Checkbox',
  tag: 'input',
  props: {
    type: 'checkbox',
    mr: 1
  },
  style: function style(props) {
    return {};
  }
}, {
  name: 'Radio',
  tag: 'input',
  props: {
    type: 'radio',
    mr: 1
  },
  style: function style(props) {
    return {};
  }
}, {
  name: 'Slider',
  tag: 'input',
  props: {
    w: 1,
    my: 2,
    mx: 0,
    type: 'range'
  },
  style: function style(props) {
    return {
      display: 'block',
      height: (0, _util.px)((0, _util.idx)('space.1', props.theme)),
      cursor: 'pointer',
      color: 'inherit',
      borderRadius: (0, _util.px)(99999),
      backgroundColor: (0, _util.color)(props)('gray', 2),
      appearance: 'none',
      '&::-webkit-slider-thumb': {
        width: (0, _util.px)(16),
        height: (0, _util.px)(16),
        backgroundColor: 'currentcolor',
        border: 0,
        borderRadius: (0, _util.px)(99999),
        appearance: 'none'
      },
      '&:focus': {
        '&::-webkit-slider-thumb': {}
      }
    };
  }
}, {
  name: 'Image',
  tag: 'img',
  props: {},
  style: {
    display: 'block',
    maxWidth: '100%',
    height: 'auto'
  }
}, {
  name: 'Avatar',
  tag: 'img',
  props: {},
  style: function style(props) {
    return {
      display: 'inline-block',
      width: (0, _util.px)(props.size || 48),
      height: (0, _util.px)(props.size || 48),
      borderRadius: (0, _util.px)(99999)
    };
  },
  propTypes: {
    size: _propTypes.number
  }
}, {
  name: 'BackgroundImage',
  tag: 'div',
  props: {
    w: 1
    // ratio: 3/4 // How does styled-components handle this??
  },
  style: function style(props) {
    return {
      backgroundImage: props.src ? 'url(' + props.src + ')' : null,
      backgroundSize: 'cover',
      backgroundPosition: 'center',
      height: 0,
      paddingBottom: (props.ratio || 3 / 4) * 100 + '%'
    };
  },
  propTypes: {
    src: _propTypes.string,
    ratio: _propTypes.number
  }
},

// Layout
{
  name: 'Container',
  tag: 'div',
  props: {
    px: 3,
    mx: 'auto'
  },
  style: function style(props) {
    return {
      maxWidth: (0, _util.px)(props.width || 1024),
      width: 'auto'
    };
  },
  propTypes: {
    width: _propTypes.number
  }
}, {
  name: 'Divider',
  tag: 'hr',
  props: {
    my: 2
  },
  style: {
    border: 0,
    borderBottomWidth: (0, _util.px)(1),
    borderBottomStyle: 'solid'
  }
}, {
  name: 'Border',
  tag: 'div',
  props: {},
  style: function style(props) {
    var w = (0, _util.px)(props.borderWidth || 1);
    var borderWidth = !props.top && !props.right && !props.bottom && !props.left ? w : null;
    var directions = borderWidth ? null : {
      borderTopWidth: props.top ? w : 0,
      borderRightWidth: props.right ? w : 0,
      borderBottomWidth: props.bottom ? w : 0,
      borderLeftWidth: props.left ? w : 0
    };

    return Object.assign({
      borderWidth: borderWidth,
      borderStyle: 'solid',
      borderColor: props.color || (0, _util.color)(props)('gray', 2),
      color: 'inherit'
    }, directions);
  },
  propTypes: {
    top: _propTypes.bool,
    right: _propTypes.bool,
    bottom: _propTypes.bool,
    left: _propTypes.bool,
    width: _propTypes.number,
    color: _propTypes.string
  }
}, {
  name: 'Media',
  tag: 'div',
  props: {},
  style: function style(props) {
    return {
      display: 'flex',
      alignItems: 'center'
    };
  }
}, {
  name: 'Card',
  tag: 'div',
  props: {
    bg: 'white'
  },
  style: function style(props) {
    return {
      overflow: 'hidden',
      boxShadow: 'inset 0 0 0 1px ' + (0, _util.color)(props)('gray', 2) + ', 0 0 4px ' + (0, _util.color)(props)('gray', 2),
      borderRadius: (0, _util.px)(props.theme.radius)
    };
  }
}, {
  name: 'Banner',
  tag: 'div',
  props: {
    p: [3, 4]
  },
  style: function style(props) {
    return {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      minHeight: '80vh',
      backgroundSize: 'cover',
      backgroundPosition: 'center',
      backgroundImage: props.backgroundImage ? 'url(' + props.backgroundImage + ')' : null
    };
  },
  propTypes: {
    backgroundImage: _propTypes.string
  }
}, {
  name: 'Panel',
  tag: 'div',
  props: {},
  style: function style(props) {
    return {
      overflow: 'hidden',
      borderRadius: (0, _util.px)(props.theme.radius),
      borderWidth: (0, _util.px)(1),
      borderStyle: 'solid'
    };
  }
}, {
  name: 'PanelHeader',
  tag: 'header',
  props: {
    f: 2,
    p: 2
  },
  style: function style(props) {
    return {
      fontWeight: (0, _util.idx)('weights.1', props.theme),
      borderBottomWidth: (0, _util.px)(1),
      borderBottomStyle: 'solid'
    };
  }
}, {
  name: 'PanelFooter',
  tag: 'footer',
  props: {
    f: 1,
    p: 2
  },
  style: function style(props) {
    return {
      fontWeight: (0, _util.idx)('weights.1', props.theme),
      borderTopWidth: (0, _util.px)(1),
      borderTopStyle: 'solid'
    };
  }
},

// UI
{
  name: 'Progress',
  tag: 'progress',
  props: {
    w: 1,
    m: 0
  },
  style: function style(props) {
    return {
      display: 'block',
      height: (0, _util.px)((0, _util.idx)('space.1', props.theme)),
      backgroundColor: (0, _util.color)(props)('gray', 2),
      borderRadius: (0, _util.px)(props.theme.radius),
      overflow: 'hidden',
      appearance: 'none',
      '&::-webkit-progress-bar': {
        backgroundColor: (0, _util.color)(props)('gray', 2)
      },
      '&::-webkit-progress-value': {
        backgroundColor: (0, _util.color)(props)(props.color)
      },
      '&::-moz-progress-bar': {
        backgroundColor: (0, _util.color)(props)(props.color)
      }
    };
  }
}, {
  name: 'Message',
  tag: 'div',
  props: {
    px: 3,
    py: 2,
    color: 'white',
    bg: 'blue'
  },
  style: function style(props) {
    return {
      fontWeight: (0, _util.idx)('weights.1', props.theme)
    };
  }
}, {
  name: 'Group',
  tag: 'div',
  props: {},
  style: function style(props) {
    var R = (0, _util.px)(props.theme.radius || 4);
    return {
      '& > *': {
        borderRadius: 0
      },
      '& > *:first-child': {
        borderRadius: R + ' 0 0 ' + R

      },
      '& > *:last-child': {
        borderRadius: '0 ' + R + ' ' + R + ' 0'
      }
    };
  }
}, {
  name: 'Toolbar',
  tag: 'div',
  props: {
    px: 2,
    color: 'white',
    bg: 'gray.9'
  },
  style: {
    display: 'flex',
    alignItems: 'center'
  }
}, {
  name: 'Badge',
  tag: 'div',
  props: {
    f: 0,
    p: 1,
    mx: 1,
    color: 'white',
    bg: 'blue'
  },
  style: function style(props) {
    return {
      fontWeight: (0, _util.idx)('weights.1', props.theme),
      display: 'inline-block',
      verticalAlign: 'middle',
      borderRadius: (0, _util.px)(props.theme.radius)
    };
  }
}, {
  name: 'Tabs',
  tag: 'div',
  props: {},
  style: function style(props) {
    return {
      display: 'flex',
      borderBottomWidth: (0, _util.px)(1),
      borderBottomStyle: 'solid',
      borderColor: (0, _util.color)(props)('gray', 2)
    };
  }
}, {
  name: 'TabItem',
  tag: 'a',
  props: {
    f: 1,
    mr: 3,
    py: 2
  },
  style: function style(props) {
    return {
      textDecoration: 'none',
      fontWeight: (0, _util.idx)('weights.1', props.theme),
      color: props.active ? (0, _util.color)(props)('blue') : 'inherit',
      borderBottomWidth: props.active ? 2 : 0,
      borderBottomStyle: 'solid',
      '&:hover': {
        color: (0, _util.color)(props)('blue')
      }
    };
  },
  propTypes: {
    active: _propTypes.bool
  }
}, {
  name: 'DotButton',
  tag: 'button',
  props: {
    m: 0
  },
  style: function style(props) {
    return {
      padding: 0,
      width: (0, _util.px)((0, _util.idx)('space.3', props.theme)),
      height: (0, _util.px)((0, _util.idx)('space.3', props.theme)),
      borderWidth: (0, _util.px)(4),
      borderStyle: 'solid',
      borderColor: 'transparent',
      backgroundClip: 'padding-box',
      borderRadius: (0, _util.px)(99999),
      backgroundColor: props.active ? 'currentcolor' : (0, _util.darken)(1 / 4),
      appearance: 'none',
      '&:hover': {
        backgroundColor: (0, _util.color)(props)('blue')
      },
      '&:focus': {
        backgroundColor: (0, _util.color)(props)('blue')
      },
      '&:disabled': {
        opacity: 1 / 4
      }
    };
  },
  propTypes: {
    active: _propTypes.bool
  }
}, {
  name: 'Relative',
  tag: 'div',
  props: {},
  style: function style(props) {
    return {
      position: 'relative',
      zIndex: props.z
    };
  }
}, {
  name: 'Absolute',
  tag: 'div',
  props: {},
  style: function style(props) {
    return {
      position: 'absolute',
      top: props.top ? 0 : null,
      right: props.right ? 0 : null,
      bottom: props.bottom ? 0 : null,
      left: props.left ? 0 : null,
      zIndex: props.z
    };
  },
  propTypes: {
    top: _propTypes.bool,
    right: _propTypes.bool,
    bottom: _propTypes.bool,
    left: _propTypes.bool,
    z: _propTypes.number
  }
}, {
  name: 'Fixed',
  tag: 'div',
  props: {},
  style: function style(props) {
    return {
      position: 'fixed',
      top: props.top ? 0 : null,
      right: props.right ? 0 : null,
      bottom: props.bottom ? 0 : null,
      left: props.left ? 0 : null,
      zIndex: props.z
    };
  },
  propTypes: {
    top: _propTypes.bool,
    right: _propTypes.bool,
    bottom: _propTypes.bool,
    left: _propTypes.bool,
    z: _propTypes.number
  }
}];

exports.default = components;